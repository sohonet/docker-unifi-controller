#!/usr/bin/with-contenv bash
# shellcheck shell=bash

good_md5_api=7aae1e012aef802cbc2077f5267ac002
good_md5_core=e9a107027346d3bbe9cbe61c5de692f0
good_md5_slf4j=edbf8a5cea0bc0cd0ada9c3c2cb78d50

# Make an array with the hashes of the patched files,
# and an array of the filenames of the patched files so
# we can iterate later.
good_jar_hashes=("$good_md5_api" "$good_md5_core" "$good_md5_slf4j")
good_jar_names=("log4j-api-2.17.1.jar" "log4j-core-2.17.1.jar" "log4j-slf4j-impl-2.17.1.jar")

good_md5_basejs=6a39da7a0aea3813039c799fe87fb898

cd /usr/lib/unifi/lib || exit 1
[ ! -d backups ] && mkdir backups

# Get the md5 hashes of all the existing jar files we care about.
# Store them in an array, ordered the same as $good_jar_hashes above.
file_number=0
for jar in log4j-{api,core,slf4j-impl}-2.11.1.jar; do
  jar_hashes[$file_number]="$(md5sum $jar | awk '{print $1}')"
  ((file_number++))
done

# new loop, start over at 0
file_number=0
# Compare md5 hashes of the current jars to the known good hashes.
# If they don't match, back up the existing and create a new symlink.
for jar in log4j-{api,core,slf4j-impl}-2.11.1.jar; do
  if [[ ${jar_hashes[file_number]} != "${good_jar_hashes[file_number]}" ]]; then
    mv $jar backups/
    ln -s "${good_jar_names[file_number]}" $jar
    ((file_number++))
  fi
done

cd /usr/lib/unifi/webapps/ROOT/app-unifi/js || exit 1
[ ! -d backups ] && mkdir backups

rm -f base.js.br
current_js_hash="$(md5sum base.js)"

if [ "$current_js_hash" != "$good_md5_basejs" ]; then
    mv base.js backups/
    cp base.js.patched base.js
fi

exit 0
